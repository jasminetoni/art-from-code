---
title: "Art From Code"
author: Jasmine Toni
format: html
editor: visual
---

# Art From Code

## Task 1

```{r-load-in-packages}
#install.packages("ggplot2")
library(ggplot2)
#install.packages("tibble")
library(tibble)
```

```{r-mgp}
mpg
```

```{r-ggplot}
mpg |>
  ggplot(aes(displ, hwy, colour = drv)) + 
  geom_point()
```

```{r-ggplot-with-theme}
mpg |>
  ggplot(aes(displ, hwy, colour = drv, size = cyl)) + 
  geom_point(show.legend = FALSE) + 
  theme_void() + 
  scale_color_brewer()
```

```{r-ggplot-but-cooler}
mpg |>
  ggplot(aes(displ, hwy, colour = drv)) + 
  geom_point(show.legend = FALSE, size = 4) + 
  geom_point(show.legend = FALSE, size = 1, colour = "#222222") + 
  coord_polar() + 
  theme_void() + 
  scale_color_brewer()
```

```{r-print-data}
set.seed(1)
n <- 50
dat <- tibble(
  x0 = runif(n),
  y0 = runif(n),
  x1 = x0 + runif(n, min = -.2, max = .2),
  y1 = y0 + runif(n, min = -.2, max = .2),
  shade = runif(n), 
  size = runif(n)
)
dat
```

```{r-change-the-colors-and-width}
dat |> 
  ggplot(aes(
    x = x0,
    y = y0,
    xend = x1,
    yend = y1,
    colour = shade,
    size = size
  )) +
  geom_segment(show.legend = FALSE) +
  coord_polar() +
  scale_y_continuous(expand = c(0, 0)) +
  scale_x_continuous(expand = c(0, 0)) + 
  scale_color_viridis_c() + 
  scale_size(range = c(0, 10)) + 
  theme_void()
```

```{r-polar-art}
polar_art <- function(seed, n, palette) {
  
  # set the state of the random number generator
  set.seed(seed)
  
  # data frame containing random values for 
  # aesthetics we might want to use in the art
  dat <- tibble(
    x0 = runif(n),
    y0 = runif(n),
    x1 = x0 + runif(n, min = -.2, max = .2),
    y1 = y0 + runif(n, min = -.2, max = .2),
    shade = runif(n), 
    size = runif(n)
  )
  
  # plot segments in various colours, using 
  # polar coordinates and a gradient palette
  dat |> 
    ggplot(aes(
      x = x0,
      y = y0,
      xend = x1,
      yend = y1,
      colour = shade,
      size = size
    )) +
    geom_segment(show.legend = FALSE) +
    coord_polar() +
    scale_y_continuous(expand = c(0, 0)) +
    scale_x_continuous(expand = c(0, 0)) + 
    scale_colour_gradientn(colours = palette) + 
    scale_size(range = c(0, 10)) + 
    theme_void()
}
```

```{r}
polar_art(seed = 1, n = 500, palette = c("antiquewhite", "orange", "bisque"))
polar_art(seed = 1, n = 500, palette = c("red", "black", "white"))
polar_art(seed = 2, n = 50, palette = c("red", "black", "white"))
```

Exercise 1

```{r}

```

```{r-adding-color}
#install.packages("scales")
library(scales)
#install.packages("ggthemes")
library(ggthemes)
```

```{r-palette}
pal <- c("#cdb4db", "#ffc8dd", "#ffafcc", "#bde0fe", "#a2d2ff")
show_col(pal)
```

```{r-expand-palette}
palette_fn <- colorRampPalette(pal)
palette_fn(100)
```

```{r-smooth-palette}
image(
  x = matrix(1:100, ncol = 1), 
  col = palette_fn(100),
  useRaster = TRUE,
  axes = FALSE
)
```

```{r-canva-palette}
canva_palettes[[101]]
show_col(canva_palettes[[101]])
```

```{r-sample-random-canva-palette}
sample_canva <- function(seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]]
}

polar_art(seed = 2, n = 100, palette = sample_canva(seed = 2))
polar_art(seed = 2, n = 100, palette = sample_canva(seed = 3))
polar_art(seed = 2, n = 100, palette = sample_canva(seed = 4))

polar_art(seed = 5, n = 100, palette = sample_canva(seed = 1))
polar_art(seed = 6, n = 100, palette = sample_canva(seed = 1))
polar_art(seed = 7, n = 100, palette = sample_canva(seed = 1))
```

```{r-tibble-random-number}
sample_data <- function(seed = NULL, n = 100){
  if(!is.null(seed)) set.seed(seed)
  dat <- tibble(
    x0 = runif(n),
    y0 = runif(n),
    x1 = x0 + runif(n, min = -.2, max = .2),
    y1 = y0 + runif(n, min = -.2, max = .2),
    shade = runif(n), 
    size = runif(n),
    shape = factor(sample(0:22, size = n, replace = TRUE))
  )
}
```

```{r-polar-styled-plot}
polar_styled_plot <- function(data = NULL, palette) {
  ggplot(
    data = data,
    mapping = aes(
      x = x0,
      y = y0,
      xend = x1,
      yend = y1,
      colour = shade,
      size = size
    )) + 
    coord_polar(clip = "off") +
    scale_y_continuous(
      expand = c(0, 0),
      limits = c(0, 1), 
      oob = scales::oob_keep
    ) +
    scale_x_continuous(
      expand = c(0, 0), 
      limits = c(0, 1), 
      oob = scales::oob_keep
    ) + 
    scale_colour_gradientn(colours = palette) + 
    scale_size(range = c(0, 10)) + 
    theme_void() + 
    guides(
      colour = guide_none(),
      size = guide_none(),
      fill = guide_none(),
      shape = guide_none()
    )
}
```

```{r-different-goem-plots}
dat <- sample_data(n = 100, seed = 1) 
pal <- sample_canva(seed = 1)

polar_styled_plot(data = dat, palette = pal) + geom_segment()
polar_styled_plot(data = dat, palette = pal) + geom_path()
polar_styled_plot(data = dat, palette = pal) + geom_point()
```

```{r-random-data-four-geom}
library(dplyr)

dat1 <- sample_data(n = 2000, seed = 123) 
dat2 <- sample_data(n = 100, seed = 456) |>  
  mutate(y0 = .3 + y0 * .6, y1 = .3)

polar_styled_plot(palette = sample_canva(seed = 7)) + 
  geom_segment(
    data = dat1 |> mutate(size = size * 3)
  ) + 
  geom_segment(
    data = dat2 |> mutate(size = size / 5), 
    lineend = "round", 
    colour = "white"
  ) +
  geom_segment(
    data = dat2 |> mutate(size = size / 40), 
    lineend = "round", 
    colour = "#222222"
  ) +
  geom_point(
    data = dat2 |> mutate(size = size * 2),
    colour = "#222222"
  )
```

```{r-more-symmetry}
dat <- sample_data(n = 2000, seed = 123) |>
  mutate(y1 = y0, size = size / 2)

polar_styled_plot(palette = sample_canva(seed = 456)) + 
  geom_segment(data = dat) + 
  geom_segment(data = dat |> mutate(y1 = y1 - .2, y0 = y0 - .2)) +
  geom_segment(data = dat |> mutate(y1 = y1 - .4, y0 = y0 - .4))
```

```{r-linetype}
dat <- sample_data(n = 1000, seed = 1) |>
  mutate(y1 = y0, size = size / 4)

polar_styled_plot(palette = sample_canva(seed = 2)) + 
  geom_segment(data = dat, linetype = "331311") 
```

## Task 2 - Spatial Tricks

```{r-load-in-packages}
library(dplyr)
library(purrr)
library(tibble)
library(ggplot2)
library(ggthemes)
#install.packages("ambient")
library(ambient)
```

```{r-random-palettes}
sample_canva <- function(seed = NULL) {
  # taking palettes from the wesbite canva
  # this function generates random palettes
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]]
}
# these are all random palettes with four colors 
sample_canva()
sample_canva()
sample_canva()
```

```{r-random-spatial-patterns}
# this goes off of task 1, not using ambient yet
# shows we can write functions to sample random spatial patterns
sample_cross_matrix <- function(n = 10, seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  mat <- matrix(data = 0, nrow = n, ncol = n)
  mat[sample(n, 1), ] <- 1
  mat[, sample(n, 1)] <- 1
  return(mat)
}

sample_cross_matrix()

# make a couple different images here with that function
image(sample_cross_matrix(n = 50), axes = FALSE, useRaster = TRUE)
image(sample_cross_matrix(n = 50), axes = FALSE, useRaster = TRUE)
image(sample_cross_matrix(n = 50), axes = FALSE, useRaster = TRUE)
```

```{r-define-canvas}
# making our canvas into a 800x800 grid
x_coords <- seq(from = 0, to = 1, length.out = 800)
y_coords <- seq(from = 0, to = 1, length.out = 800)

# define our canvas as the x and y coordinates
canvas <- long_grid(x = x_coords, y = y_coords) 
canvas
```

```{r-perlin-brush}
# now we have to add paint to our canvas
# gen_perlin is good for generating wavy patterns
# gen_perlin takes coordinate values as input and frequency to set the scale for output
gen_perlin(x = 1:5, y = 1, frequency = .001, seed = 1)
gen_perlin(x = 1:5, y = 1, frequency = .5, seed = 1)
```

```{r-new-column}
# add the gen_perlin function as a new column to our canvas
canvas <- canvas |> 
  # mutate function from dplyr to do this
  mutate(paint = gen_perlin(x, y, frequency = 10, seed = 1234))
canvas
```

```{r-define-art}
# we use geom_raster to make art
# the new column in canvas allows us to control the fill
art <- ggplot(canvas, aes(x, y, fill = paint)) + 
  geom_raster(show.legend = FALSE) 
```

```{r-first-spatial-image}
# now time to make some real spatial art
art + 
  # remove unnecessary details
  theme_void() +
  coord_equal()
art + 
  # to remove extraneous elements from the art
  theme_void() +
  coord_equal() +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  scale_fill_gradientn(colours = sample_canva())
```

```{r-setting-up-variables}
make_noise_art <- function(
    # set the paint brush
    generator = gen_perlin, 
    # sets the scale for the output
    frequency = 10, 
    # random number generator, used to set the pattern
    seed = 1234,
    # setting the amount of pixels (how many bits are in canvas)
    pixels = 2000,
    # setting the palette/color scheme
    palette = c("#e5ddc8", "#01949a", "#004369", "#db1f48"), 
    ...
) {
  
  # define the grid
  canvas <- long_grid(
    x = seq(from = 0, to = 1, length.out = pixels),
    y = seq(from = 0, to = 1, length.out = pixels)
  ) 
  
  # use the generator to add paint
  canvas <- canvas |>
    mutate(
      paint = generator(
        x, y, 
        frequency = frequency, 
        seed = seed, 
        ...
      )
    )
  
  # use ggplot2 to draw the picture
  art <- canvas |> 
    ggplot(aes(x, y, fill = paint)) + 
    geom_raster(show.legend = FALSE) +
    # get rid of extraneous elements
    theme_void() +
    coord_equal() +
    scale_x_continuous(expand = c(0, 0)) +
    scale_y_continuous(expand = c(0, 0)) +
    scale_fill_gradientn(colours = palette)
  
  return(art)
}

# now change the frequency 
make_noise_art(frequency = 10)
make_noise_art(frequency = 20)
make_noise_art(frequency = 90)
```

```{r-change-seed}
# run some spatial art and change the seed
# changes the spatial pattern depicted in each canvas
make_noise_art(seed = 1234)
make_noise_art(seed = 1001)
make_noise_art(seed = 9999)
```

```{r-change-frequency}
# now change the frequency 
# changes the "granularity", almost looks like changing the pixels, but it is just systemic variation of how often the pattern is repeated in the canvas
make_noise_art(frequency = 10)
make_noise_art(frequency = 20)
make_noise_art(frequency = 90)
```

```{r-change-palette}
# changing the color palette to be black and white
make_noise_art(palette = c("white", "black"))
# changing the palette to one from canva
make_noise_art(palette = sample_canva(seed = 123))
# I like this last one the best, its a green and red palette
make_noise_art(palette = sample_canva(seed = 456))
```

```{r-change-generator}
# changing the generator 
# we have been using gen_perlin as our "brush"
make_noise_art(generator = gen_perlin)
# trying gen_worley as our brush
# looks like choppy waves
make_noise_art(generator = gen_worley)
# trying gen_waves
# looks like lines from a protractor 
make_noise_art(generator = gen_waves) 
```

```{r-blank-canvas}
# creating blank canvas as an object that I can reuse as starting point for other pieces
blank_canvas <- long_grid(
  x = seq(from = 0, to = 1, length.out = 2000),
  y = seq(from = 0, to = 1, length.out = 2000)
) 
```

```{r-plot-as-raster-object}
# new column called paint to canvas
# plotting function that plots this as raster object
plot_painted_canvas <- function(canvas, palette = NULL) {
  if(is.null(palette)) {
    palette <- c("#e5ddc8","#01949a","#004369","#db1f48")
  }
  canvas |> 
    ggplot(aes(x, y, fill = paint)) + 
    geom_raster(show.legend = FALSE) +
    theme_void() +
    coord_equal() +
    scale_x_continuous(expand = c(0, 0)) +
    scale_y_continuous(expand = c(0, 0)) +
    scale_fill_gradientn(colours = palette)
}

# recreate one of our earlier pieces as a dplyr pipeline
blank_canvas |>
  mutate(paint = gen_perlin(x, y, frequency = 90, seed = 1234)) |>
  plot_painted_canvas()
```

```{r-adding-spatial-patterns}
# taking three different spatial patterns and adding them together
blank_canvas |> 
  mutate(
    # one spatial pattern
    lf_noise = gen_simplex(x, y, frequency = 1, seed = 1234),
    # another spatial pattern
    mf_noise = gen_simplex(x, y, frequency = 20, seed = 1234),
    # last spatial pattern
    hf_noise = gen_simplex(x, y, frequency = 99, seed = 1234),
    paint = lf_noise + mf_noise + hf_noise
  ) |>
  plot_painted_canvas()
```

```{r-spatial-pattern-with-gate}
blank_canvas |> 
  mutate(
    # using the previous three spatial patterns
    lf_noise = gen_simplex(x, y, frequency = 1),
    mf_noise = gen_simplex(x, y, frequency = 20),
    hf_noise = gen_simplex(x, y, frequency = 99),
    # now mixed with the values of the gate column
    gate = gen_spheres(x, y, frequency = 10) |> normalise(),
    paint = lf_noise +
      (1 + mf_noise) * (gate >= .1 & gate < .6) +
      (1 + hf_noise) * (gate >= .05)
  ) |>
  plot_painted_canvas(palette = sample_canva(seed = 2))
```

```{r-fancier-generator}
# same thing but with a a fancier generator to make a spatial gate pattern
blank_canvas |> 
  mutate(
    lf_noise = gen_simplex(x, y, frequency = 1),
    mf_noise = gen_simplex(x, y, frequency = 20),
    hf_noise = gen_simplex(x, y, frequency = 99),
    gate = gen_simplex(x, y, frequency = 10) |> normalise(),
    paint = lf_noise +
      (2 + mf_noise) * (gate >= .2 & gate < .8) +
      (2 + hf_noise) * (gate >= .1)
  ) |>
  plot_painted_canvas(palette = sample_canva(seed = 3))
```
